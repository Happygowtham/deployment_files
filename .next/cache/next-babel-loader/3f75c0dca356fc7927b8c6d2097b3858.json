{"ast":null,"code":"const MongoClient = require('mongodb').MongoClient;\n\nconst assert = require('assert');\n\nconst bcrypt = require('bcrypt');\n\nconst v4 = require('uuid').v4;\n\nconst jwt = require('jsonwebtoken');\n\nconst jwtSecret = 'SUPERSECRETE20220';\nconst saltRounds = 10;\nconst url = 'mongodb://localhost:27017';\nconst dbName = 'simple-login-db';\nconst client = new MongoClient(url, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nfunction findUser(db, email, callback) {\n  const collection = db.collection('user');\n  collection.findOne({\n    email\n  }, callback);\n}\n\nfunction createUser(db, email, password, callback) {\n  const collection = db.collection('user');\n  bcrypt.hash(password, saltRounds, function (err, hash) {\n    // Store hash in your password DB.\n    collection.insertOne({\n      userId: v4(),\n      email,\n      password: hash\n    }, function (err, userCreated) {\n      assert.equal(err, null);\n      callback(userCreated);\n    });\n  });\n}\n\nexport default ((req, res) => {\n  if (req.method === 'POST') {\n    // signup\n    try {\n      assert.notEqual(null, req.body.email, 'Email required');\n      assert.notEqual(null, req.body.password, 'Password required');\n    } catch (bodyError) {\n      res.status(403).json({\n        error: true,\n        message: bodyError.message\n      });\n    } // verify email does not exist already\n\n\n    client.connect(function (err) {\n      assert.equal(null, err);\n      console.log('Connected to MongoDB server =>');\n      const db = client.db(dbName);\n      const email = req.body.email;\n      const password = req.body.password;\n      findUser(db, email, function (err, user) {\n        if (err) {\n          res.status(500).json({\n            error: true,\n            message: 'Error finding User'\n          });\n          return;\n        }\n\n        if (!user) {\n          // proceed to Create\n          createUser(db, email, password, function (creationResult) {\n            if (creationResult.ops.length === 1) {\n              const user = creationResult.ops[0];\n              const token = jwt.sign({\n                userId: user.userId,\n                email: user.email\n              }, jwtSecret, {\n                expiresIn: 3000 //50 minutes\n\n              });\n              res.status(200).json({\n                token\n              });\n              return;\n            }\n          });\n        } else {\n          // User exists\n          res.status(403).json({\n            error: true,\n            message: 'Email exists'\n          });\n          return;\n        }\n      });\n    });\n  } else {\n    // Handle any other HTTP method\n    res.status(200).json({\n      users: ['Gowtham']\n    });\n  }\n});","map":{"version":3,"sources":["D:/Python/intern/reglog1/pages/api/users.js"],"names":["MongoClient","require","assert","bcrypt","v4","jwt","jwtSecret","saltRounds","url","dbName","client","useNewUrlParser","useUnifiedTopology","findUser","db","email","callback","collection","findOne","createUser","password","hash","err","insertOne","userId","userCreated","equal","req","res","method","notEqual","body","bodyError","status","json","error","message","connect","console","log","user","creationResult","ops","length","token","sign","expiresIn","users"],"mappings":"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","sourcesContent":["const MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\nconst bcrypt = require('bcrypt');\nconst v4 = require('uuid').v4;\nconst jwt = require('jsonwebtoken');\nconst jwtSecret = 'SUPERSECRETE20220';\n\nconst saltRounds = 10;\nconst url = 'mongodb://localhost:27017';\nconst dbName = 'simple-login-db';\n\nconst client = new MongoClient(url, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nfunction findUser(db, email, callback) {\n  const collection = db.collection('user');\n  collection.findOne({email}, callback);\n}\n\nfunction createUser(db, email, password, callback) {\n  const collection = db.collection('user');\n  bcrypt.hash(password, saltRounds, function(err, hash) {\n    // Store hash in your password DB.\n    collection.insertOne(\n      {\n        userId: v4(),\n        email,\n        password: hash,\n      },\n      function(err, userCreated) {\n        assert.equal(err, null);\n        callback(userCreated);\n      },\n    );\n  });\n}\n\nexport default (req, res) => {\n  if (req.method === 'POST') {\n    // signup\n    try {\n      assert.notEqual(null, req.body.email, 'Email required');\n      assert.notEqual(null, req.body.password, 'Password required');\n    } catch (bodyError) {\n      res.status(403).json({error: true, message: bodyError.message});\n    }\n\n    // verify email does not exist already\n    client.connect(function(err) {\n      assert.equal(null, err);\n      console.log('Connected to MongoDB server =>');\n      const db = client.db(dbName);\n      const email = req.body.email;\n      const password = req.body.password;\n\n      findUser(db, email, function(err, user) {\n        if (err) {\n          res.status(500).json({error: true, message: 'Error finding User'});\n          return;\n        }\n        if (!user) {\n          // proceed to Create\n          createUser(db, email, password, function(creationResult) {\n            if (creationResult.ops.length === 1) {\n              const user = creationResult.ops[0];\n              const token = jwt.sign(\n                {userId: user.userId, email: user.email},\n                jwtSecret,\n                {\n                  expiresIn: 3000, //50 minutes\n                },\n              );\n              res.status(200).json({token});\n              return;\n            }\n          });\n        } else {\n          // User exists\n          res.status(403).json({error: true, message: 'Email exists'});\n          return;\n        }\n      });\n    });\n  } else {\n    // Handle any other HTTP method\n    res.status(200).json({users: ['Gowtham']});\n  }\n};\n"]},"metadata":{},"sourceType":"module"}