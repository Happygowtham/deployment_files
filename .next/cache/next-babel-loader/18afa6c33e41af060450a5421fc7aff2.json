{"ast":null,"code":"const MongoClient = require('mongodb').MongoClient;\n\nconst assert = require('assert');\n\nconst bcrypt = require('bcrypt');\n\nconst jwt = require('jsonwebtoken');\n\nconst jwtSecret = 'SUPERSECRETE20220';\nconst saltRounds = 10;\nconst url = process.env.url;\nconst dbName = process.env.dbName;\nconst client = new MongoClient(url, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nfunction findUser(db, email, callback) {\n  const collection = db.collection('user');\n  collection.findOne({\n    email\n  }, callback);\n}\n\nfunction authUser(db, email, password, hash, callback) {\n  const collection = db.collection('user');\n  bcrypt.compare(password, hash, callback);\n}\n\nexport default ((req, res) => {\n  if (req.method === 'POST') {\n    //login\n    try {\n      assert.notEqual(null, req.body.email, 'Email required');\n      assert.notEqual(null, req.body.password, 'Password required');\n    } catch (bodyError) {\n      res.status(403).send(bodyError.message);\n    }\n\n    client.connect(function (err) {\n      assert.equal(null, err);\n      console.log('Connected to MongoDB server =>');\n      const db = client.db(dbName);\n      const email = req.body.email;\n      const password = req.body.password;\n      findUser(db, email, function (err, user) {\n        if (err) {\n          res.status(500).json({\n            error: true,\n            message: 'Error finding User'\n          });\n          return;\n        }\n\n        if (!user) {\n          res.status(404).json({\n            error: true,\n            message: 'User not found'\n          });\n          return;\n        } else {\n          authUser(db, email, password, user.password, function (err, match) {\n            if (err) {\n              res.status(500).json({\n                error: true,\n                message: 'Auth Failed'\n              });\n            }\n\n            if (match) {\n              const token = jwt.sign({\n                userId: user.userId,\n                email: user.email\n              }, jwtSecret, {\n                expiresIn: 3000 //50 minutes\n\n              });\n              res.status(200).json({\n                token\n              });\n              return;\n            } else {\n              res.status(401).json({\n                error: true,\n                message: 'Auth Failed'\n              });\n              return;\n            }\n          });\n        }\n      });\n    });\n  } else {\n    // Handle any other HTTP method\n    res.statusCode = 401;\n    res.end();\n  }\n});","map":{"version":3,"sources":["D:/Python/intern/reglog1/pages/api/auth.js"],"names":["MongoClient","require","assert","bcrypt","jwt","jwtSecret","saltRounds","url","process","env","dbName","client","useNewUrlParser","useUnifiedTopology","findUser","db","email","callback","collection","findOne","authUser","password","hash","compare","req","res","method","notEqual","body","bodyError","status","send","message","connect","err","equal","console","log","user","json","error","match","token","sign","userId","expiresIn","statusCode","end"],"mappings":"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","sourcesContent":["const MongoClient = require('mongodb').MongoClient\nconst assert = require('assert')\nconst bcrypt = require('bcrypt')\nconst jwt = require('jsonwebtoken')\nconst jwtSecret = 'SUPERSECRETE20220'\n\nconst saltRounds = 10;\nconst url = process.env.url\nconst dbName = process.env.dbName\n\nconst client = new MongoClient(url, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nfunction findUser(db, email, callback) {\n  const collection = db.collection('user')\n  collection.findOne({email}, callback);\n}\n\nfunction authUser(db, email, password, hash, callback) {\n  const collection = db.collection('user')\n  bcrypt.compare(password, hash, callback)\n}\n\nexport default (req, res) => {\n  if (req.method === 'POST') {\n    //login\n    try {\n      assert.notEqual(null, req.body.email, 'Email required');\n      assert.notEqual(null, req.body.password, 'Password required');\n    } catch (bodyError) {\n      res.status(403).send(bodyError.message);\n    }\n\n    client.connect(function(err) {\n      assert.equal(null, err);\n      console.log('Connected to MongoDB server =>');\n      const db = client.db(dbName);\n      const email = req.body.email;\n      const password = req.body.password;\n\n      findUser(db, email, function(err, user) {\n        if (err) {\n          res.status(500).json({error: true, message: 'Error finding User'});\n          return;\n        }\n        if (!user) {\n          res.status(404).json({error: true, message: 'User not found'});\n          return;\n        } \n        else {\n          authUser(db, email, password, user.password, function(err, match) {\n            if (err) {\n              res.status(500).json({error: true, message: 'Auth Failed'});\n            }\n            if (match) \n            {\n              const token = jwt.sign(\n                {userId: user.userId, email: user.email},\n                jwtSecret,\n                {\n                  expiresIn: 3000, //50 minutes\n                },\n              );\n              res.status(200).json({token});\n              return;\n            } \n            else {\n              res.status(401).json({error: true, message: 'Auth Failed'});\n              return;\n            }\n          });\n        }\n      });\n    });\n  } else {\n    // Handle any other HTTP method\n    res.statusCode = 401;\n    res.end();\n  }\n};\n"]},"metadata":{},"sourceType":"module"}